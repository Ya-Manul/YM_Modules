# meta developer: @ManulMods '

from hikkatl.types import Message
from hikkatl.errors import RPCError
from .. import loader, utils
import requests
import logging
import time

logger = logging.getLogger(__name__)

@loader.tds
class CurrencyConverterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç —Å —ç–º–æ–¥–∑–∏"""
    strings = {
        "name": "CurrencyConverter",
        "rates": "<emoji document_id=5431577498364158238>üìä</emoji> <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã ({} {}):</b>\n{}",
        "converted": "<emoji document_id=5283232570660634549>ü™ô</emoji> <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {} {} = {} {}",
        "error": "<emoji document_id=5843952899184398024>üö´</emoji> <b>–û—à–∏–±–∫–∞:</b> {}",
        "updating": "<emoji document_id=5292226786229236118>üîÑ</emoji> –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...",
        "updated": "<emoji document_id=5220219696711736568>‚úîÔ∏è</emoji> –ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "available_currencies": (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n"
            "<emoji document_id=5375129692380607677>üí∞</emoji> –¥–æ–ª–ª–∞—Ä/USD\n"
            "<emoji document_id=5375069159111537380>üí∞</emoji> –µ–≤—Ä–æ/EUR\n"
            "<emoji document_id=5375606180347393942>üí∞</emoji> —Ä—É–±–ª—å/RUB\n"
            "<emoji document_id=5375281137222433818>üí∞</emoji> –≥—Ä–∏–≤–Ω–∞/UAH\n"
            "<emoji document_id=5375328755524843717>üí∞</emoji> —Ç–µ–Ω–≥–µ/KZT\n"
            "<emoji document_id=5375173294888598829>üí∞</emoji> —é–∞–Ω—å/CNY\n"
            "<emoji document_id=5372795957475820830>üí∞</emoji> –∑–ª–æ—Ç—ã–π/PLN\n"
            "<emoji document_id=5289519973285257969>üí∞</emoji> BTC\n"
            "<emoji document_id=5289648693455119919>üí∞</emoji> TON\n"
            "<emoji document_id=5289904548951911168>üí∞</emoji> USDT"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "base_currency",
                "USD",
                "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "cache_time",
                3600,
                "–í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
                validator=loader.validators.Integer(minimum=60),
            ),
        )
        
        # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–ª—é—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ —Ç–æ—á–Ω—ã–µ —ç–º–æ–¥–∑–∏)
        self.currency_emojis = {
            "–¥–æ–ª–ª–∞—Ä": "<emoji document_id=5375129692380607677>üí∞</emoji>",
            "usd": "<emoji document_id=5375129692380607677>üí∞</emoji>",
            "—Ä—É–±": "<emoji document_id=5375606180347393942>üí∞</emoji>",
            "rub": "<emoji document_id=5375606180347393942>üí∞</emoji>",
            "–µ–≤—Ä–æ": "<emoji document_id=5375069159111537380>üí∞</emoji>",
            "eur": "<emoji document_id=5375069159111537380>üí∞</emoji>",
            "–≥—Ä–∏–≤–Ω–∞": "<emoji document_id=5375281137222433818>üí∞</emoji>",
            "uah": "<emoji document_id=5375281137222433818>üí∞</emoji>",
            "—Ç–µ–Ω–≥–µ": "<emoji document_id=5375328755524843717>üí∞</emoji>",
            "kzt": "<emoji document_id=5375328755524843717>üí∞</emoji>",
            "—é–∞–Ω—å": "<emoji document_id=5375173294888598829>üí∞</emoji>",
            "cny": "<emoji document_id=5375173294888598829>üí∞</emoji>",
            "–∑–ª–æ—Ç—ã–π": "<emoji document_id=5372795957475820830>üí∞</emoji>",
            "pln": "<emoji document_id=5372795957475820830>üí∞</emoji>",
            "btc": "<emoji document_id=5289519973285257969>üí∞</emoji>",
            "bitcoin": "<emoji document_id=5289519973285257969>üí∞</emoji>",
            "ton": "<emoji document_id=5289648693455119919>üí∞</emoji>",
            "toncoin": "<emoji document_id=5289648693455119919>üí∞</emoji>",
            "usdt": "<emoji document_id=5289904548951911168>üí∞</emoji>",
            "tether": "<emoji document_id=5289904548951911168>üí∞</emoji>",
        }
        
        # –°–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π –≤–∞–ª—é—Ç
        self.currency_forms = {
            "–¥–æ–ª–ª–∞—Ä": ["–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä–∞", "–¥–æ–ª–ª–∞—Ä–æ–≤"],
            "—Ä—É–±": ["—Ä—É–±–ª—å", "—Ä—É–±–ª—è", "—Ä—É–±–ª–µ–π"],
            "–µ–≤—Ä–æ": ["–µ–≤—Ä–æ", "–µ–≤—Ä–æ", "–µ–≤—Ä–æ"],
            "–≥—Ä–∏–≤–Ω–∞": ["–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω—ã", "–≥—Ä–∏–≤–µ–Ω"],
            "—Ç–µ–Ω–≥–µ": ["—Ç–µ–Ω–≥–µ", "—Ç–µ–Ω–≥–µ", "—Ç–µ–Ω–≥–µ"],
            "—é–∞–Ω—å": ["—é–∞–Ω—å", "—é–∞–Ω—è", "—é–∞–Ω–µ–π"],
            "–∑–ª–æ—Ç—ã–π": ["–∑–ª–æ—Ç—ã–π", "–∑–ª–æ—Ç—ã—Ö", "–∑–ª–æ—Ç—ã—Ö"],
            "bitcoin": ["–±–∏—Ç–∫–æ–∏–Ω", "–±–∏—Ç–∫–æ–∏–Ω–∞", "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"],
            "toncoin": ["—Ç–æ–Ω", "—Ç–æ–Ω–∞", "—Ç–æ–Ω–æ–≤"],
            "tether": ["—Ç–µ–∑–µ—Ä", "—Ç–µ–∑–µ—Ä–∞", "—Ç–µ–∑–µ—Ä–æ–≤"],
        }
        
        self.rates = {
            # –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            "–¥–æ–ª–ª–∞—Ä": 1.0, "usd": 1.0,
            "—Ä—É–±": 80.0, "rub": 80.0,
            "–µ–≤—Ä–æ": 0.92, "eur": 0.92,
            "–≥—Ä–∏–≤–Ω–∞": 38.0, "uah": 38.0,
            "—Ç–µ–Ω–≥–µ": 450.0, "kzt": 450.0,
            "—é–∞–Ω—å": 7.2, "cny": 7.2,
            "–∑–ª–æ—Ç—ã–π": 4.0, "pln": 4.0,
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            "btc": 30000.0,
            "ton": 3.3, "toncoin": 3.3,
            "usdt": 1.0, "tether": 1.0,
        }
        self.last_update = 0

    def get_currency_display(self, currency: str, amount: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª—é—Ç—É —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
        amount = abs(amount)
        emoji = self.currency_emojis.get(currency, "")
        
        # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if currency in ["btc", "ton", "usdt"]:
            return f"{emoji} {currency.upper()}"
            
        # –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ
        forms = self.currency_forms.get(currency, [currency]*3)
        if amount % 10 == 1 and amount % 100 != 11:
            return f"{emoji} {forms[0]}"
        elif 2 <= amount % 10 <= 4 and (amount % 100 < 10 or amount % 100 >= 20):
            return f"{emoji} {forms[1]}"
        else:
            return f"{emoji} {forms[2]}"

    async def client_ready(self, client, db):
        self._client = client
        await self.update_rates()

    async def update_rates(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
            response = await utils.run_sync(
                requests.get,
                f"https://api.exchangerate-api.com/v4/latest/{self.config['base_currency']}"
            )
            data = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            crypto_response = await utils.run_sync(
                requests.get,
                "https://api.coingecko.com/api/v3/simple/price",
                params={
                    "ids": "bitcoin,the-open-network,tether",
                    "vs_currencies": "usd",
                    "precision": 8
                }
            )
            crypto_data = crypto_response.json()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
            self.rates.update({
                # –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                "–¥–æ–ª–ª–∞—Ä": 1.0, "usd": 1.0,
                "—Ä—É–±": data["rates"]["RUB"], "rub": data["rates"]["RUB"],
                "–µ–≤—Ä–æ": data["rates"]["EUR"], "eur": data["rates"]["EUR"],
                "–≥—Ä–∏–≤–Ω–∞": data["rates"]["UAH"], "uah": data["rates"]["UAH"],
                "—Ç–µ–Ω–≥–µ": data["rates"]["KZT"], "kzt": data["rates"]["KZT"],
                "—é–∞–Ω—å": data["rates"]["CNY"], "cny": data["rates"]["CNY"],
                "–∑–ª–æ—Ç—ã–π": data["rates"]["PLN"], "pln": data["rates"]["PLN"],
                
                # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                "btc": crypto_data["bitcoin"]["usd"],
                "ton": crypto_data["the-open-network"]["usd"],
                "toncoin": crypto_data["the-open-network"]["usd"],
                "usdt": crypto_data["tether"]["usd"],
                "tether": crypto_data["tether"]["usd"],
            })
            self.last_update = time.time()
            return True
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")
            return False

    def format_value(self, value):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if abs(value - round(value)) < 0.0001:
            return str(round(value))
        return f"{value:.8f}".replace(".", ",").rstrip("0").rstrip(",")

    @loader.command()
    async def kurs(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        args = utils.get_args_raw(message)
        amount = float(args.replace(",", ".")) if args and args.replace(",", "").replace(".", "").isdigit() else 1.0
        
        if time.time() - self.last_update > self.config["cache_time"]:
            if not await self.update_rates():
                await utils.answer(
                    message,
                    self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
                )
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–∞–ª—é—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        fiat_currencies = ["–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—Ä—É–±", "–≥—Ä–∏–≤–Ω–∞", "—Ç–µ–Ω–≥–µ", "—é–∞–Ω—å", "–∑–ª–æ—Ç—ã–π"]
        crypto_currencies = ["btc", "ton", "usdt"]
        
        formatted = []
        
        # –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        formatted.append("\n<b>–§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>")
        for currency in fiat_currencies:
            value = self.rates[currency] * amount
            display = self.get_currency_display(currency, value)
            formatted.append(f"{display} {self.format_value(value)}")
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        formatted.append("\n<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
        for currency in crypto_currencies:
            value = self.rates[currency]  # –ü—Ä—è–º–æ–π –∫—É—Ä—Å (1 UNIT = X USD)
            display = self.get_currency_display(currency, value)
            formatted.append(f"{display} {self.format_value(value)}")
        
        await utils.answer(
            message,
            self.strings("rates").format(
                self.format_value(amount),
                self.get_currency_display(self.config["base_currency"].lower(), amount),
                "\n".join(formatted)
            )
        )

    @loader.command()
    async def convert(self, message: Message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"""
        args = utils.get_args_raw(message).lower().split()
        if len(args) != 3:
            await utils.answer(
                message,
                self.strings("error").format(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .convert <amount> <from> <to>\n"
                    f"{self.strings['available_currencies']}"
                )
            )
            return
        
        try:
            amount = float(args[0].replace(",", "."))
            from_cur = args[1]
            to_cur = args[2]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
            currency_map = {
                # –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                "–¥–æ–ª–ª–∞—Ä": "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä–∞": "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä–æ–≤": "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä": "–¥–æ–ª–ª–∞—Ä—ã",
                "usd": "–¥–æ–ª–ª–∞—Ä",
                "—Ä—É–±–ª—å": "—Ä—É–±", "—Ä—É–±–ª—è": "—Ä—É–±", "—Ä—É–±–ª–µ–π": "—Ä—É–±", "—Ä—É–±": "—Ä—É–±", "—Ä—É–±–ª–∏": "—Ä—É–±",
                "rub": "—Ä—É–±",
                "–µ–≤—Ä–æ": "–µ–≤—Ä–æ", "eur": "–µ–≤—Ä–æ",
                "–≥—Ä–∏–≤–Ω–∞": "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω—ã": "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–µ–Ω": "–≥—Ä–∏–≤–Ω–∞",
                "uah": "–≥—Ä–∏–≤–Ω–∞",
                "—Ç–µ–Ω–≥–µ": "—Ç–µ–Ω–≥–µ", "kzt": "—Ç–µ–Ω–≥–µ",
                "—é–∞–Ω—å": "—é–∞–Ω—å", "—é–∞–Ω—è": "—é–∞–Ω—å", "—é–∞–Ω—å": "—é–∞–Ω–∏", "—é–∞–Ω–µ–π": "—é–∞–Ω—å", "cny": "—é–∞–Ω—å", "—é–∞–Ω–∏": "—é–∞–Ω—å",
                "–∑–ª–æ—Ç—ã–π": "–∑–ª–æ—Ç—ã–π", "–∑–ª–æ—Ç—ã–π": "–∑–ª–æ—Ç—ã–µ", "–∑–ª–æ—Ç—ã—Ö": "–∑–ª–æ—Ç—ã–π", "pln": "–∑–ª–æ—Ç—ã–π",
                
                # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                "btc": "btc", "bitcoin": "btc", "–±–∏—Ç–∫–æ–∏–Ω": "btc", "–±–∏—Ç–∫–æ–∏–Ω–∞": "btc", "–±–∏—Ç–∫–æ–∏–Ω–æ–≤": "btc",
                "ton": "ton", "toncoin": "ton", "—Ç–æ–Ω": "ton", "—Ç–æ–Ω–∞": "ton", "—Ç–æ–Ω–æ–≤": "ton",
                "usdt": "usdt", "tether": "usdt", "—Ç–µ–∑–µ—Ä": "usdt", "—Ç–µ–∑–µ—Ä–∞": "usdt", "—Ç–µ–∑–µ—Ä–æ–≤": "usdt",
            }
            
            from_cur = currency_map.get(from_cur, from_cur)
            to_cur = currency_map.get(to_cur, to_cur)
            
            valid_currencies = list(set(currency_map.values()))
            if from_cur not in valid_currencies or to_cur not in valid_currencies:
                await utils.answer(
                    message,
                    self.strings("error").format(
                        f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞. {self.strings['available_currencies']}"
                    )
                )
                return
            
            if time.time() - self.last_update > self.config["cache_time"]:
                if not await self.update_rates():
                    await utils.answer(
                        message,
                        self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
                    )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ USD
            if from_cur == to_cur:
                result = amount
            elif from_cur in ["btc", "ton", "usdt"]:
                # –ö—Ä–∏–ø—Ç–æ -> –õ—é–±–∞—è –≤–∞–ª—é—Ç–∞
                usd_amount = amount * self.rates[from_cur]
                if to_cur == "–¥–æ–ª–ª–∞—Ä":
                    result = usd_amount
                else:
                    result = usd_amount * self.rates[to_cur]
            elif to_cur in ["btc", "ton", "usdt"]:
                # –õ—é–±–∞—è –≤–∞–ª—é—Ç–∞ -> –ö—Ä–∏–ø—Ç–æ
                if from_cur == "–¥–æ–ª–ª–∞—Ä":
                    usd_amount = amount
                else:
                    usd_amount = amount / self.rates[from_cur]
                result = usd_amount / self.rates[to_cur]
            else:
                # –§–∏–∞—Ç -> –§–∏–∞—Ç
                usd_amount = amount / self.rates[from_cur]
                result = usd_amount * self.rates[to_cur]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
            from_display = self.get_currency_display(from_cur, amount)
            to_display = self.get_currency_display(to_cur, result)
            
            await utils.answer(
                message,
                self.strings("converted").format(
                    self.format_value(amount),
                    from_display,
                    self.format_value(result),
                    to_display
                )
            )
        except ValueError:
            await utils.answer(
                message,
                self.strings("error").format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
            )
        except Exception as e:
            await utils.answer(
                message,
                self.strings("error").format(f"–û—à–∏–±–∫–∞: {str(e)}")
            )

    @loader.command()
    async def updatekurs(self, message: Message):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤—Ä—É—á–Ω—É—é"""
        await utils.answer(message, self.strings("updating"))
        if await self.update_rates():
            await utils.answer(message, self.strings("updated"))
        else:
            await utils.answer(
                message,
                self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")
            ) 
