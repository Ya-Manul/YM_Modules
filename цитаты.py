# meta developer: @YA_ManuI

from telethon.tl.types import Message, Channel
import random
from .. import loader, utils

@loader.tds
class QuotePickerMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
    strings = {
        "name": "QuotePicker",
        "no_channel": "‚ùå –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∑–∞–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π .setdefchannel",
        "no_access": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!",
        "set_ok": "‚úÖ –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}"
    }

    def __init__(self):
        self.default_channel_id = None  # ID –∫–∞–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.default_channel_id = self.db.get("QuotePicker", "default_channel")

    @loader.command()
    async def rquote(self, message: Message):
        """[username –∫–∞–Ω–∞–ª–∞] - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É"""
        args = utils.get_args_raw(message)
        channel_entity = None

        try:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if args:
                channel_entity = await self.client.get_entity(args)
            else:
                if not self.default_channel_id:
                    return await utils.answer(message, self.strings("no_channel"))
                channel_entity = await self.client.get_entity(self.default_channel_id)

            if not isinstance(channel_entity, Channel):
                return await utils.answer(message, "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!")

            messages = await self.client.get_messages(channel_entity, limit=2000)
            text_messages = [m for m in messages if m.text]

            if not text_messages:
                return await utils.answer(message, "üì≠ –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

            quote = random.choice(text_messages)
            result = f"üìñ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ {channel_entity.title}:\n\n{quote.text}"
            await utils.answer(message, result)

        except ValueError:
            await utils.answer(message, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def setdefchannel(self, message: Message):
        """<username/id –∫–∞–Ω–∞–ª–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª!")

        try:
            channel = await self.client.get_entity(args)
            if not isinstance(channel, Channel):
                return await utils.answer(message, "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!")

            self.default_channel_id = channel.id
            self.db.set("QuotePicker", "default_channel", channel.id)
            await utils.answer(message, self.strings("set_ok").format(channel.title))

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")