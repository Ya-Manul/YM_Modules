#meta developer @ManulMods 

from hikkatl.types import Message
from hikkatl.errors import RPCError
from .. import loader, utils
import requests
import logging
import time

logger = logging.getLogger(__name__)

@loader.tds
class CurrencyConverterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç (USD, RUB, EUR, TON)"""
    strings = {
        "name": "CurrencyConverter",
        "rates": "üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã ({} {}):</b>\n{}",
        "converted": "üí± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {} {} = {} {}",
        "error": "üö´ <b>–û—à–∏–±–∫–∞:</b> {}",
        "updating": "üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...",
        "updated": "‚úÖ –ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "available_currencies": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: –¥–æ–ª–ª–∞—Ä/USD, —Ä—É–±/RUB, –µ–≤—Ä–æ/EUR, ton/TON",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "base_currency",
                "USD",
                "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "cache_time",
                3600,
                "–í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
                validator=loader.validators.Integer(minimum=60),
            ),
        )
        self.rates = {
            "–¥–æ–ª–ª–∞—Ä": 1.0,
            "usd": 1.0,
            "—Ä—É–±": 80.0,
            "rub": 80.0,
            "–µ–≤—Ä–æ": 0.92,
            "eur": 0.92,
            "ton": 1/3.3,  # 1 TON = 3.3 USD ‚Üí 1 USD = 1/3.3 TON
            "toncoin": 1/3.3,
        }
        self.last_update = 0

    async def update_rates(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
            response = await utils.run_sync(
                requests.get,
                f"https://api.exchangerate-api.com/v4/latest/{self.config['base_currency']}"
            )
            data = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –≤ USD
            ton_response = await utils.run_sync(
                requests.get,
                "https://api.coingecko.com/api/v3/simple/price",
                params={
                    "ids": "the-open-network",
                    "vs_currencies": "usd",
                    "precision": 8
                }
            )
            ton_data = ton_response.json()
            ton_price = ton_data["the-open-network"]["usd"]
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1 TON = X USD ‚Üí 1 USD = 1/X TON
            self.rates.update({
                "–¥–æ–ª–ª–∞—Ä": 1.0,
                "usd": 1.0,
                "—Ä—É–±": data["rates"]["RUB"],
                "rub": data["rates"]["RUB"],
                "–µ–≤—Ä–æ": data["rates"]["EUR"],
                "eur": data["rates"]["EUR"],
                "ton": 1/ton_price,  # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                "toncoin": 1/ton_price,
            })
            self.last_update = time.time()
            return True
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")
            return False

    def format_value(self, value):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if abs(value - round(value)) < 0.0001:
            return str(round(value))
        return f"{value:.8f}".replace(".", ",").rstrip("0").rstrip(",")

    @loader.command()
    async def kurs(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        args = utils.get_args_raw(message)
        amount = float(args.replace(",", ".")) if args and args.replace(",", "").replace(".", "").isdigit() else 1.0
        
        if time.time() - self.last_update > self.config["cache_time"]:
            if not await self.update_rates():
                await utils.answer(
                    message,
                    self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
                )
        
        formatted = []
        for currency in ["–¥–æ–ª–ª–∞—Ä", "—Ä—É–±", "–µ–≤—Ä–æ", "ton"]:
            value = self.rates[currency] * amount
            formatted.append(f"{currency} {self.format_value(value)}")
        
        await utils.answer(
            message,
            self.strings("rates").format(
                self.format_value(amount),
                self.config["base_currency"],
                "\n".join(formatted)
            )
        )

    @loader.command()
    async def convert(self, message: Message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"""
        args = utils.get_args_raw(message).lower().split()
        if len(args) != 3:
            await utils.answer(
                message,
                self.strings("error").format(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .convert <amount> <from> <to>\n"
                    f"{self.strings['available_currencies']}"
                )
            )
            return
        
        try:
            amount = float(args[0].replace(",", "."))
            from_cur = args[1].replace("toncoin", "ton")
            to_cur = args[2].replace("toncoin", "ton")
            
            valid_currencies = ["–¥–æ–ª–ª–∞—Ä", "usd", "—Ä—É–±", "rub", "–µ–≤—Ä–æ", "eur", "ton", "toncoin"]
            if from_cur not in valid_currencies or to_cur not in valid_currencies:
                await utils.answer(
                    message,
                    self.strings("error").format(
                        f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞. {self.strings['available_currencies']}"
                    )
                )
                return
            
            if time.time() - self.last_update > self.config["cache_time"]:
                if not await self.update_rates():
                    await utils.answer(
                        message,
                        self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
                    )
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ USD
            if from_cur in ["ton", "toncoin"]:
                usd_amount = amount * (1 / self.rates["ton"])  # TON ‚Üí USD
            else:
                usd_amount = amount / self.rates[from_cur]    # –§–∏–∞—Ç ‚Üí USD
                
            if to_cur in ["ton", "toncoin"]:
                result = usd_amount * self.rates["ton"]      # USD ‚Üí TON
            else:
                result = usd_amount * self.rates[to_cur]     # USD ‚Üí –§–∏–∞—Ç
            
            await utils.answer(
                message,
                self.strings("converted").format(
                    self.format_value(amount),
                    from_cur,
                    self.format_value(result),
                    to_cur
                )
            )
        except ValueError:
            await utils.answer(
                message,
                self.strings("error").format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
            )
        except Exception as e:
            await utils.answer(
                message,
                self.strings("error").format(f"–û—à–∏–±–∫–∞: {str(e)}")
            )

    @loader.command()
    async def updatekurs(self, message: Message):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤—Ä—É—á–Ω—É—é"""
        await utils.answer(message, self.strings("updating"))
        if await self.update_rates():
            await utils.answer(message, self.strings("updated"))
        else:
            await utils.answer(
                message,
                self.strings("error").format("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")
            )