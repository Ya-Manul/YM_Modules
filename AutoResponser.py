#meta developer @ManulMods

from typing import Dict, List, Set
import re
from hikkatl.types import Message
from .. import loader, utils

@loader.tds
class AutoResponderMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""

    strings = {
        "name": "AutoResponder",
        "added": "‚úÖ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n‚ñ∏ <code>{}</code> ‚Üí <code>{}</code>",
        "removed": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ <code>{}</code> —É–¥–∞–ª—ë–Ω",
        "not_found": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "list": "üìä <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ ({}):</b>\n\n{}",
        "empty": "üö´ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤",
        "syntax": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!</b>\n‚ñ∏ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <code>{}aa –∫–ª—é—á\\n–æ—Ç–≤–µ—Ç</code>",
        "global_status": "üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:</b> {}\n‚ñ∏ –ê–∫—Ç–∏–≤–µ–Ω –≤ {} —á–∞—Ç–∞—Ö",
        "chat_enabled": "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "chat_disabled": "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
    }

    def __init__(self):
        self._responses: Dict[str, str] = {}
        self._active_chats: Set[int] = set()
        self._global_enabled = True
        self._db = None
        self._client = None

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._responses = self._db.get("AutoResponder", "responses", {})
        self._active_chats = set(self._db.get("AutoResponder", "active_chats", []))
        self._global_enabled = self._db.get("AutoResponder", "global_enabled", True)

    def _save(self):
        self._db.set("AutoResponder", "responses", self._responses)
        self._db.set("AutoResponder", "active_chats", list(self._active_chats))
        self._db.set("AutoResponder", "global_enabled", self._global_enabled)

    @loader.command(ru_doc="<–∫–ª—é—á>\\n<–æ—Ç–≤–µ—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
    async def aa(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç"""
        try:
            args = utils.get_args_raw(message)
            if not args or "\n" not in args:
                raise ValueError
            
            keyword, response = args.split("\n", 1)
            keyword = keyword.strip().lower()
            response = response.strip()

            if not keyword or not response:
                raise ValueError

            self._responses[keyword] = response
            self._save()

            await utils.answer(
                message,
                self.strings("added").format(
                    utils.escape_html(keyword),
                    utils.escape_html(response)
                )
            )
        except:
            await utils.answer(
                message,
                self.strings("syntax").format(self.get_prefix())
            )

    @loader.command(ru_doc="<–∫–ª—é—á> - –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
    async def ar(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")

        keyword = args.strip().lower()
        if keyword in self._responses:
            del self._responses[keyword]
            self._save()
            await utils.answer(
                message,
                self.strings("removed").format(utils.escape_html(keyword))
            )
        else:
            await utils.answer(
                message,
                self.strings("not_found").format(utils.escape_html(keyword))
            )

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã")
    async def al(self, message: Message):
        """–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        if not self._responses:
            return await utils.answer(message, self.strings("empty"))

        response_list = "\n".join(
            f"‚ñ∏ <code>{k}</code>: {v}" 
            for k, v in self._responses.items()
        )
        await utils.answer(
            message,
            self.strings("list").format(len(self._responses), response_list)
        )

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ")
    async def aatoggle(self, message: Message):
        """–í–∫–ª/–≤—ã–∫–ª –ì–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self._global_enabled = not self._global_enabled
        self._save()
        status = "‚úÖ –í–∫–ª—é—á—ë–Ω" if self._global_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(
            message,
            self.strings("global_status").format(status, len(self._active_chats))
        )

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def aaon(self, message: Message):
        """–í–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if chat_id in self._active_chats:
            return await utils.answer(message, "‚ÑπÔ∏è –£–∂–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        
        self._active_chats.add(chat_id)
        self._save()
        await utils.answer(message, self.strings("chat_enabled"))

    @loader.command(ru_doc="–í—ã–∫–ª—é—á–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def aaoff(self, message: Message):
        """–í—ã–∫–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ"""
        chat_id = utils.get_chat_id(message)
        if chat_id not in self._active_chats:
            return await utils.answer(message, "‚ÑπÔ∏è –£–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        
        self._active_chats.remove(chat_id)
        self._save()
        await utils.answer(message, self.strings("chat_disabled"))

    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
            if not isinstance(message, Message):
                return
            
            if message.out or not message.text:
                return
                
            if not self._global_enabled:
                return
                
            chat_id = utils.get_chat_id(message)
            if chat_id not in self._active_chats:
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.sender_id == (await self._client.get_me()).id:
                return

            # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            text = message.text.lower()
            for keyword, response in self._responses.items():
                if re.search(rf'\b{re.escape(keyword)}\b', text):
                    await utils.answer(message, response)
                    break
                    
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ watcher: %s", e)