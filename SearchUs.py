# meta developer  @YA_ManuI

from telethon.tl.types import Message, User
from .. import loader, utils

@loader.tds
class UserIDFinderMod(loader.Module):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
    strings = {"name": "UserID Finder"}

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def –∏–¥(self, message: Message):
        """[@—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Ä–µ–ø–ª–∞–π] - –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        
        try:
            if args:
                username = args.lstrip('@')
                user = await self.client.get_entity(username)
            elif reply:
                user = await self.client.get_entity(reply.sender_id)
            else:
                return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–ª–∞–π!")

            if isinstance(user, User):
                result = (
                    f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                    f"üÜî ID: <code>{user.id}</code>\n"
                    f"üìõ –ò–º—è: {user.first_name or ''}\n"
                    f"üìö –§–∞–º–∏–ª–∏—è: {user.last_name or ''}\n"
                    f"üåê –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–Ω–µ—Ç'}\n"
                    f"ü§ñ –ë–æ—Ç: {'–î–∞' if user.bot else '–ù–µ—Ç'}"
                )
                await utils.answer(message, result)
            else:
                await utils.answer(message, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")

        except ValueError:
            await utils.answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")